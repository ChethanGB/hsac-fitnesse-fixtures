!-AndroidAppTest-! defines a language (a DSL of sorts) to interact with a native Android App. 
 
Android App Test extends Browser Test for convenience methods, but needs an Appium !-androidDriver-! to interact with elements of type !-MobileElement-! (tap, swipe, etc.) This also means we can use Android's !-UiAutomator-! to locate interactable elements.

locators are defined using !-UiSelectors-!. text is considered default, so looking for a given string will assume we are lokking for an element containing an exact match of this text.
Otherwise, we can use all !-UiAutomator-! methods, by formatting our locator as method=value. Examples:

-| comment |
|Menu                           |Will match the first element that has a text value of 'Menu' (exact)                 |
|text=Menu                      |Same as above                                                                        |
|textMatches=/menu/i            |Will match the first element that matches the regex '/menu/i'                        |
|textContains=Menu              |Will match the first element that has a text value containing 'Menu'                 |
|textStartsWith=Menu            |Will match the first element that has a text value starting with 'Menu'              |
|description=More options       |Will match the firste element that has the content-desc 'More options'(exact)        |
|descriptionContains=options    |Will match the first element that has a content-desc containing 'options'            |
|descriptionMatches=/OPT/i      |Will match the first element that has a content-desc that matches the regex '/OPT/i' |
|descriptionStartsWith=More     |Will match the first element that has a content-desc starting with 'options'         |
|resourceId=nl.pkg:id/error_text|Will match the element with resource id 'nl.pkg:id/error_text'(exact)                |
|resourceIdMatches=/error_text/ |will match the first element with a resource id that matches the regex '/error_text/'|

More info: [[Google documentation][http://developer.android.com/reference/android/support/test/uiautomator/UiSelector.html]]

Example test cases:
>ThuisBezorgdDemo (test Thuisbezorgd app installed on device)
>NegenTweeAppDemo (install 9292 apk on device and run test)

!2 Language
!3 !-AndroidAppTest-!
The main commands/keywords (i.e. public methods) offered by !-nl.hsac.fitnesse.fixture.slim.mobile.AndroidAppTest-! are listed below.
The heuristic to find places tries a number of translations of end user terms to Selenium 'find' commands (e.g. is a full or partial label given, a link's or button's text, a placeholder). The first find that results in an element on the page is used by !-BrowserTest-!.

-| Comment |
|set implicit wait in seconds <seconds>        |Sets the amount of seconds to wait for driver actions. If this time is exceeded i.e. by looking for an element, a timeout will occur.            |
|set swipe speed in milliseconds <milliseconds>|Sets the time used to execute a swipe. Defaults to 1000ms. Swipe speed affects application behaviour in some scenario's (date wheels, scrolling) |
|set wait after swipe <milliseconds>           |Sets a default explicit wait after executing a swipe. Defaults to 0. In some cases we have to wait for an animation to finish after swiping      |
|tap <location>                                |single taps the element with one finger                                                                                                          |
|enter <value> as <location>                   |Sets the value of the element to a defined value (uses keyboard, appium will try to clear the element's value first). Hides keyboard after typing|
|value of <location>                           |returns the String value of an element. For use with FitNesse's check keyword                                                                    |
|element displayed <location>                  |returns true is the element is displayed on screen. For use with FitNesse's ensure/reject keywords                                               |
|swipe up                                      |swipes from 80% of vertical screen resolution to 20% of vertical screen resolution                                                               |
|swipe down                                    |swipes from 20% of vertical screen resolution to 80% of vertical screen resolution                                                               |
|swipe left                                    |swipes from 80% of horizontal screen resolution to 20% of horiontal screen resolution                                                            |
|swipe right                                   |swipes from 20% of horizontal screen resolution to 80% of horiontal screen resolution                                                            |
|swipe <direction> from <location>             |start a swipe from the defined elements location to the screen edge in the defined direction (untested 20160411)                                 |
|press back button                             |simulates pressing the device's back button                                                                                                      |
|take screenshot <filename>                    |Takes a screenshot of the device's screen and saves it to filename                                                                               |
